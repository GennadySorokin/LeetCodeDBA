[ENG]
LeetCode
178. Rank Scores

SQL Schema

Create table If Not Exists Scores (id int, score DECIMAL(3,2))
Truncate table Scores
insert into Scores (id, score) values ('1', '3.5')
insert into Scores (id, score) values ('2', '3.65')
insert into Scores (id, score) values ('3', '4.0')
insert into Scores (id, score) values ('4', '3.85')
insert into Scores (id, score) values ('5', '4.0')
insert into Scores (id, score) values ('6', '3.65')

pandansSchema

Scores = pd.DataFrame([], columns=['id', 'score']).astype({'id':'int64', 'score':'float64'})

Table: Scores

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| score       | decimal |
+-------------+---------+
In SQL, id is the primary key for this table.
Each row of this table contains the score of a game. Score is a floating point value with two decimal places.
 

Find the rank of the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.
Return the result table ordered by score in descending order.


The result format is in the following example.

Example 1:

Input: 
Scores table:
+----+-------+
| id | score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+

Output: 
+-------+------+
| score | rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

Answer:

MySQL Explanation:
To find the rank of scores in SQL, we can use the DENSE_RANK() window function along with ordering the scores in descending order.
The query returns the scores along with their corresponding ranks, sorted in descending order by score. If there is a tie between scores, they both receive the same rank, and there are no holes between the ranks.
In MySQL, we need to backticks (`) to escape the column alias containing reserved keywords.

MySQL Code:
SELECT score, DENSE_RANK() OVER (ORDER BY score DESC) AS `rank`
FROM Scores
ORDER BY score DESC;

MS SQL Explanation:
In MS SQL Server, we need to use square brackets ([]) to escape the column alias containing reserved keywords.

MS SQL Code:
SELECT score, DENSE_RANK() OVER (ORDER BY score DESC) AS [rank]
FROM Scores
ORDER BY score DESC;

[RUS]
LeetCode
178. Ранговые баллы

Схема SQL

Создать таблицу If Not Exists Scores (id int, score DECIMAL(3,2))
Усечь таблицу Scores
insert into Scores (id, score) values ('1', '3.5')
insert into Scores (id, score) values ('2', '3.65')
insert into Scores (id, score) values ('3', '4.0')
insert into Scores (id, score) values ('4', '3.85')
insert into Scores (id, score) values ('5', '4.0')
insert into Scores (id, score) values ('6', '3.65')

pandansSchema

Scores = pd.DataFrame([], columns=['id', 'score']).astype({'id':'int64', 'score':'float64'})

Таблица: Баллы

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| score       | decimal |
+-------------+---------+
В SQL id является первичным ключом этой таблицы.
Каждая строка этой таблицы содержит счет игры. Счет - это значение с плавающей точкой с двумя десятичными знаками.
 

Найдите ранг набранных очков. Ранг должен быть рассчитан в соответствии со следующими правилами:

Оценки должны располагаться в порядке от наибольшей к наименьшей.
Если между двумя оценками существует равенство, то обе оценки должны иметь одинаковый ранг.
После равенства баллов следующим номером рейтинга должно быть следующее за ним целое значение. Другими словами, между рангами не должно быть дыр.
Возвращает таблицу результатов, упорядоченную по убыванию баллов.


Формат результата приведен в следующем примере.
 
Пример 1:

Входные данные: 
Таблица баллов:
+----+-------+
| id | score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+

Выходные данные: 
+-------+------+
| score | rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

Ответ:

Пояснение для MySQL:
Для нахождения ранга оценок в SQL можно использовать оконную функцию DENSE_RANK(), а также упорядочить оценки по убыванию.
Запрос возвращает оценки и соответствующие им ранги, отсортированные в порядке убывания оценок. Если между оценками есть равенство, то обе они получают одинаковый ранг, а дырок между рангами нет.
В MySQL для экранирования псевдонима столбца, содержащего зарезервированные ключевые слова, необходимо использовать обратные знаки (`).

Код MySQL:
SELECT score, DENSE_RANK() OVER (ORDER BY score DESC) AS `rank`
FROM Scores
ORDER BY score DESC;

Пояснение для MS SQL:
В MS SQL Server необходимо использовать квадратные скобки ([]) для экранирования псевдонима столбца, содержащего зарезервированные ключевые слова.

Код MS SQL:
SELECT score, DENSE_RANK() OVER (ORDER BY score DESC) AS [rank]
FROM Scores
ORDER BY score DESC;
